---
- name: Install openshift python package
  hosts: masters
  tasks:
    - name: Install openshift python package
      yum: 
          state: latest 
          name: 
            - python2-openshift
- name: Deploy Cakephp with NO persistent storage
  hosts: masters
  vars:
    database_password_definition: "{{ lookup('password', '/dev/null length=10 chars=ascii_letters') }}"
    cakephp_secret_token_definition: "{{ lookup('password', '/dev/null length=10 chars=ascii_letters') }}"
    cakephp_security_salt_definition: "{{ lookup('password', '/dev/null length=10 chars=ascii_letters') }}"
    database_name: default
    database_user: cakephp
    namespace: cakephp
    app_name: cakephp-mysql-example
    secret_name: cakesecret
    database_service_name: mysql
    source_repository_url: https://github.com/sclorg/cakephp-ex.git
    php_version: "7.1"
    github_webhook_secret_definition: "{{ lookup('password', '/dev/null length=40 chars=ascii_letters') }}"
    database_engine: mysql
    opcache_revalidate_freq: 2
  tasks:
    - name: Define secret's passwords
      run_once: true
      set_fact:
        database_password: "{{ database_password_definition }}"  
        cakephp_secret_token: "{{ cakephp_secret_token_definition }}"
        cakephp_security_salt: "{{ cakephp_security_salt_definition }}"
        github_webhook_secret: "{{ github_webhook_secret_definition }}" 
    - name: Create {{ namespace }} namespace
      run_once: true
      k8s:
        api_version: v1
        kind: Namespace
        name: "{{ namespace }}"
        state: present
    - name: Create Secret
      run_once: true
      k8s:
        api_version: v1
        state: present
        namespace: "{{ namespace }}"
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: "{{ secret_name }}"
          stringData:
            cakephp-secret-token: "{{ cakephp_secret_token }}"
            cakephp-security-salt: "{{ cakephp_security_salt }}"
            database-password: "{{ database_password }}"
            database-user: "{{ database_user }}"
    - name: Create Database Service 
      run_once: true
      k8s:
        api_version: v1
        state: present
        namespace: "{{ namespace }}"
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            annotations:
              description: Exposes the database server
            name: "{{ database_service_name }}"
          spec:
            ports:
            - name: mysql
              port: 3306
              targetPort: 3306
            selector:
              name: "{{ database_service_name }}"
    - name: Create Mysql DeploymentConfig
      run_once: true
      k8s:
        state: present
        namespace: "{{ namespace }}"
        definition: "{{ lookup('template', 'mysql-dc.yml') }}"
    - name: Create Application service
      run_once: true
      k8s:
        api_version: v1
        state: present
        namespace: "{{ namespace }}"
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            annotations:
              description: Exposes and load balances the application pods
            name: "{{ app_name }}"
          spec:
            ports:
            - name: web
              port: 8080
              targetPort: 8080
            selector:
              name: "{{ app_name }}" 
    - name: Create cakephp Image stream 
      run_once: true
      k8s:
        api_version: v1
        state: present
        namespace: "{{ namespace }}"
        definition:
          apiVersion: v1
          kind: ImageStream
          metadata:
            annotations:
              description: Keeps track of changes in the application image
            name: "{{ app_name }}"
    - name: Create cakephp Buildconfig
      run_once: true
      k8s:
        api_version: v1
        state: present
        namespace: "{{ namespace }}"
        definition: "{{ lookup('template', 'cakephp-buildconfig.yml') }}"
    - name: Create Cakephp Deployment config
      run_once: true
      k8s:
        state: present
        namespace: "{{ namespace }}"
        definition: "{{ lookup('template', 'cakephp-dc.yml') }}"
    - name: Create Cakephp entry Route
      run_once: true
      k8s:
        state: present
        namespace: "{{ namespace }}"
        definition:
          apiVersion: v1
          kind: Route
          metadata:
            name: "{{ app_name }}"
          spec:
            to:
              kind: Service
              name: "{{ app_name }}"

- name: Deploy Image Uploader with PERSISTENT storage
  hosts: masters
  vars:
    namespace: imageuploader
    app_name: image-uploader
    source_repository_url: https://github.com/OpenShiftInAction/image-uploader.git
    php_version: "7.1"
    github_webhook_secret_definition: "{{ lookup('password', '/dev/null length=30 chars=ascii_letters') }}"
  tasks:
    - name: Define secret's passwords
      run_once: true
      set_fact:
        github_webhook_secret: "{{ github_webhook_secret_definition }}" 
    - name: Create {{ namespace }} namespace
      run_once: true
      k8s:
        api_version: v1
        kind: Namespace
        name: "{{ namespace }}"
        state: present
    - name: Create Service 
      run_once: true
      k8s:
        api_version: v1
        state: present
        namespace: "{{ namespace }}"
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            annotations:
              description: Exposes the database server
            labels:
              app: "{{ app_name }}"
            name: "{{ app_name }}"
          spec:
            ports:
            - name: 8080-tcp
              port: 8080
              protocol: TCP
              targetPort: 8080
            - name: 8443-tcp
              port: 8443
              protocol: TCP
              targetPort: 8443
            selector:
              app: "{{ app_name }}"
              deploymentconfig: "{{ app_name }}"
    - name: Create {{ namespace }} PVC
      run_once: true
      k8s: 
        state: present
        namespace: "{{ namespace }}"
        definition:
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: "{{ app_name }}"
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 2Gi 
    - name: Create Image Uploader DeploymentConfig
      run_once: true
      k8s:
        state: present
        namespace: "{{ namespace }}"
        definition: "{{ lookup('template', 'imageuploader-dc.yml') }}"
    - name: Create Image Uploader Image stream 
      run_once: true
      k8s:
        api_version: v1
        state: present
        namespace: "{{ namespace }}"
        definition:
          apiVersion: v1
          kind: ImageStream
          metadata:
            annotations:
              description: Keeps track of changes in the application image
            name: "{{ app_name }}"
    - name: Create  Image Uploader Buildconfig
      run_once: true
      k8s:
        api_version: v1
        state: present
        namespace: "{{ namespace }}"
        definition: "{{ lookup('template', 'imageuploader-bc.yml') }}"
    - name: Create Image Uploader entry Route
      run_once: true
      k8s:
        state: present
        namespace: "{{ namespace }}"
        definition:
          apiVersion: v1
          kind: Route
          metadata:
            name: "{{ app_name }}"
          spec:
            port:
              targetPort: 8080-tcp
            to:
              kind: Service
              name: "{{ app_name }}"
- name: Deploy ToDo app with no persistent storage
  hosts: masters
  vars:
    namespace: todoapp
    app_name: todo-app
    mongodb_application_name: mongodb
    mongodb_user_definition: "{{ lookup('password', '/dev/null length=8 chars=ascii_letters') }}"
    mongodb_password_definition: "{{ lookup('password', '/dev/null length=8 chars=ascii_letters') }}"
    mongodb_admin_password_definition: "{{ lookup('password', '/dev/null length=8 chars=ascii_letters') }}"
    github_trigger_secret_definition: "{{ lookup('password', '/dev/null length=8 chars=ascii_letters') }}"
    generic_trigger_secret_definition: "{{ lookup('password', '/dev/null length=8 chars=ascii_letters') }}"
    mongodb_database: tododb
    memory_limit: "128Mi"
    mongo_memory_limit: "128Mi"
    context_dir: openshift-cicd-flask-mongo
    git_ref: master
    git_uri: https://github.com/OpenShiftInAction/chapter6
    gogs_version: "0.11.29"
    gogs_postgresql_password_definition: "{{ lookup('password', '/dev/null length=8 chars=ascii_letters') }}"
    gogs_password_definition: "{{ lookup('password', '/dev/null length=8 chars=ascii_letters') }}"
  tasks:
    - name: Fix random variables
      run_once: true
      set_fact:
        mongodb_user: "{{ mongodb_user_definition }}"  
        mongodb_password: "{{ mongodb_password_definition }}"
        mongodb_admin_password: "{{ mongodb_admin_password_definition }}" 
        github_trigger_secret: "{{ github_trigger_secret_definition }}"
        generic_trigger_secret: "{{ generic_trigger_secret_definition }}"
        gogs_postgresql_password: "{{ gogs_postgresql_password_definition }}"
        gogs_password: "{{ gogs_password_definition }}"
    - name: Create {{ namespace }} namespace
      run_once: true
      k8s:
        api_version: v1
        kind: Namespace
        name: "{{ namespace }}"
        state: present
    - name: Add edit role to default user in {{ namespace }}
      run_once: true
      k8s:
        api_version: v1
        state: present
        namespace: "{{ namespace }}"
        definition:
          apiVersion: v1
          groupNames: null
          kind: RoleBinding
          metadata:
            name: default_edit
          roleRef:
            name: edit
          subjects:
          - kind: ServiceAccount
            name: default
    - name: Create MongoDB Service 
      run_once: true
      k8s:
        api_version: v1
        state: present
        namespace: "{{ namespace }}"
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            labels:
              component: "{{ mongodb_application_name }}"
            name: "{{ mongodb_application_name }}"
          spec:
            ports:
            - name: mongo
              port: 27017
              protocol: TCP
              targetPort: 27017
            selector:
              name: "{{ mongodb_application_name }}"
            sessionAffinity: None
            type: ClusterIP
    - name: Create MongoDB DeploymentConfig
      run_once: true
      k8s:
        state: present
        namespace: "{{ namespace }}"
        definition: "{{ lookup('template', 'mongodb-dc.yml') }}"
    - name: Create {{ app_name }} Image stream 
      run_once: true
      k8s:
        api_version: v1
        state: present
        namespace: "{{ namespace }}"
        definition:
          apiVersion: v1
          kind: ImageStream
          metadata:
            name: "{{ app_name }}"
          spec:
            tags:
            - name: latest
    - name: Create {{ app_name }} Buildconfig
      run_once: true
      k8s:
        api_version: v1
        state: present
        namespace: "{{ namespace }}"
        definition: "{{ lookup('template', 'todoapp-bc.yml') }}"
    - name: Create {{ app_name }} DeploymentConfig
      run_once: true
      k8s:
        state: present
        namespace: "{{ namespace }}"
        definition: "{{ lookup('template', 'todoapp-dc.yml') }}"
    - name: Create {{ app_name }} Service 
      run_once: true
      k8s:
        api_version: v1
        state: present
        namespace: "{{ namespace }}"
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            labels:
              component: "{{ app_name }}"
            name: "{{ app_name }}"
          spec:
            ports:
            - name: 8080-tcp
              port: 8080
              protocol: TCP
              targetPort: 5000
            selector:
              component: "{{ app_name }}"
            sessionAffinity: None
            type: ClusterIP
    - name: Create {{ app_name }} entry Route
      run_once: true
      k8s:
        state: present
        namespace: "{{ namespace }}"
        definition:
          apiVersion: v1
          kind: Route
          metadata:
            labels:
              component: "{{ app_name }}"
            name: "{{ app_name }}"
          spec:
            port:
              targetPort: 8080-tcp
            to:
              kind: Service
              name: "{{ app_name }}"
              weight: 100
    - name: Create gogs Service 
      run_once: true
      k8s:
        api_version: v1
        state: present
        namespace: "{{ namespace }}"
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            annotations:
              description: The Gogs server's http port
            labels:
              app: gogs
            name: gogs
          spec:
            ports:
            - name: web
              port: 3000
              protocol: TCP
              targetPort: 3000
            selector:
              app: gogs
              deploymentconfig: gogs
            sessionAffinity: None
            type: ClusterIP
    - name: Create Gogs entry Route
      run_once: true
      k8s:
        state: present
        namespace: "{{ namespace }}"
        definition:
          apiVersion: v1
          kind: Route
          metadata:
            annotations:
              description: Route for gogs's http service.
            labels:
              app: gogs
            name: gogs
          spec:
            to:
              kind: Service
              name: gogs
    - name: Create Gogs Image stream 
      run_once: true
      k8s:
        api_version: v1
        state: present
        namespace: "{{ namespace }}"
        definition:
          apiVersion: v1
          kind: ImageStream
          metadata:
            labels:
              app: gogs
            name: gogs
          spec:
            tags:
            - annotations:
                description: The Gogs git server docker image
                tags: gogs,go,golang
              from:
                kind: DockerImage
                name: "openshiftdemos/gogs:{{ gogs_version }}"
              name: "{{ gogs_version }}"
    - name: Create Gogs DeploymentConfig
      run_once: true
      k8s:
        state: present
        namespace: "{{ namespace }}"
        definition: "{{ lookup('template', 'gogs-dc.yml') }}"
    - name: Create PostgreSQL Service 
      run_once: true
      k8s:
        api_version: v1
        state: present
        namespace: "{{ namespace }}"
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            labels:
              app: postgresql-gogs
            name: postgresql-gogs
          spec:
            ports:
            - name: postgresql
              port: 5432
              protocol: TCP
              targetPort: 5432
            selector:
              app: postgresql-gogs
            sessionAffinity: None
            type: ClusterIP
    - name: Create PostgreSQL DeploymentConfig
      run_once: true
      k8s:
        state: present
        namespace: "{{ namespace }}"
        definition: "{{ lookup('template', 'postgresql-dc.yml') }}"
    - name: Deploy install gogs pod
      run_once: true
      k8s:
        api_version: v1
        state: present
        namespace: "{{ namespace }}"
        definition:
          apiVersion: v1
          kind: Pod
          metadata:
            annotations:
              template.alpha.openshift.io/wait-for-ready: "true"
            labels:
              app: gogs
              job: install-gogs
            name: install-gogs
          spec:
            containers:
            - command:
              - /bin/bash
              - /tmp/install/installgogs.sh
              env:
              - name: DEV_PROJECT
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.namespace
              image: docker.io/openshiftdemos/oc
              name: oc
              resources:
                limits:
                  memory: 128Mi
              volumeMounts:
              - mountPath: /tmp/install
                name: gogs-install
            restartPolicy: Never
            volumes:
            - configMap:
                items:
                - key: installgogs.sh
                  path: installgogs.sh
                name: gogs-install
              name: gogs-install
    - name: Create install gogs config map 
      run_once: true
      k8s:
        state: present
        namespace: "{{ namespace }}"
        definition: "{{ lookup('template', 'install-gogs-cm.yml') }}"
...
