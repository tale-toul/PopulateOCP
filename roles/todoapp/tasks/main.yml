---
# tasks file for todoapp
- name: Create {{ namespace }} project
  k8s:
    api_key: "{{ _auth_result.k8s_auth.api_key }}"
    api_version: v1
    kind: Project
    name: "{{ namespace }}"
    state: "{{ todo_state }}"
  register: _project_creation
  failed_when: _project_creation.failed == true and not (todo_state == "absent" and _project_creation.status == 403)

- when: todo_state == "present"
  block:
    - name: Add edit role to default user in {{ namespace }}
      k8s:
        api_key: "{{ _auth_result.k8s_auth.api_key }}"
        api_version: v1
        state: "{{ todo_state }}"
        namespace: "{{ namespace }}"
        definition:
          apiVersion: v1
          groupNames: null
          kind: RoleBinding
          metadata:
            name: default_edit
          roleRef:
            name: edit
          subjects:
          - kind: ServiceAccount
            name: default
    - name: Create MongoDB Service 
      k8s:
        api_key: "{{ _auth_result.k8s_auth.api_key }}"
        api_version: v1
        state: "{{ todo_state }}"
        namespace: "{{ namespace }}"
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            labels:
              component: "{{ mongodb_application_name }}"
            name: "{{ mongodb_application_name }}"
          spec:
            ports:
            - name: mongo
              port: 27017
              protocol: TCP
              targetPort: 27017
            selector:
              name: "{{ mongodb_application_name }}"
            sessionAffinity: None
            type: ClusterIP
    - name: Create {{ namespace }} PVC for {{ mongodb_application_name }}
      k8s: 
        api_key: "{{ _auth_result.k8s_auth.api_key }}"
        api_version: v1
        state: "{{ todo_state }}"
        namespace: "{{ namespace }}"
        definition:
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: "{{ mongodb_application_name }}"
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 2Gi 
    - name: Create MongoDB DeploymentConfig
      k8s:
        api_key: "{{ _auth_result.k8s_auth.api_key }}"
        api_version: v1
        state: "{{ todo_state }}"
        namespace: "{{ namespace }}"
        definition: "{{ lookup('template', 'mongodb-dc.yml') }}"
    - name: Create {{ todo_app_name }} Image stream 
      k8s:
        api_key: "{{ _auth_result.k8s_auth.api_key }}"
        api_version: v1
        state: "{{ todo_state }}"
        namespace: "{{ namespace }}"
        definition:
          apiVersion: v1
          kind: ImageStream
          metadata:
            name: "{{ todo_app_name }}"
          spec:
            tags:
            - name: latest
    - name: Create {{ todo_app_name }} Buildconfig
      k8s:
        api_key: "{{ _auth_result.k8s_auth.api_key }}"
        api_version: v1
        state: "{{ todo_state }}"
        namespace: "{{ namespace }}"
        definition: "{{ lookup('template', 'todoapp-bc.yml') }}"
    - name: Create {{ todo_app_name }} DeploymentConfig
      k8s:
        api_key: "{{ _auth_result.k8s_auth.api_key }}"
        api_version: v1
        state: "{{ todo_state }}"
        namespace: "{{ namespace }}"
        definition: "{{ lookup('template', 'todoapp-dc.yml') }}"
    - name: Create {{ todo_app_name }} Service 
      k8s:
        api_key: "{{ _auth_result.k8s_auth.api_key }}"
        api_version: v1
        state: "{{ todo_state }}"
        namespace: "{{ namespace }}"
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            labels:
              component: "{{ todo_app_name }}"
            name: "{{ todo_app_name }}"
          spec:
            ports:
            - name: 8080-tcp
              port: 8080
              protocol: TCP
              targetPort: 5000
            selector:
              component: "{{ todo_app_name }}"
            sessionAffinity: None
            type: ClusterIP
    - name: Create {{ todo_app_name }} entry Route
      k8s:
        api_key: "{{ _auth_result.k8s_auth.api_key }}"
        api_version: v1
        state: "{{ todo_state }}"
        namespace: "{{ namespace }}"
        definition:
          apiVersion: v1
          kind: Route
          metadata:
            labels:
              component: "{{ todo_app_name }}"
            name: "{{ todo_app_name }}"
          spec:
            port:
              targetPort: 8080-tcp
            to:
              kind: Service
              name: "{{ todo_app_name }}"
              weight: 100
    - name: Create gogs Service 
      k8s:
        api_key: "{{ _auth_result.k8s_auth.api_key }}"
        api_version: v1
        state: "{{ todo_state }}"
        namespace: "{{ namespace }}"
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            annotations:
              description: The Gogs server's http port
            labels:
              app: gogs
            name: gogs
          spec:
            ports:
            - name: web
              port: 3000
              protocol: TCP
              targetPort: 3000
            selector:
              app: gogs
              deploymentconfig: gogs
            sessionAffinity: None
            type: ClusterIP
    - name: Create Gogs entry Route
      k8s:
        api_key: "{{ _auth_result.k8s_auth.api_key }}"
        api_version: v1
        state: "{{ todo_state }}"
        namespace: "{{ namespace }}"
        definition:
          apiVersion: v1
          kind: Route
          metadata:
            annotations:
              description: Route for gogs's http service.
            labels:
              app: gogs
            name: gogs
          spec:
            to:
              kind: Service
              name: gogs
    - name: Create Gogs Image stream 
      k8s:
        api_key: "{{ _auth_result.k8s_auth.api_key }}"
        api_version: v1
        state: "{{ todo_state }}"
        namespace: "{{ namespace }}"
        definition:
          apiVersion: v1
          kind: ImageStream
          metadata:
            labels:
              app: gogs
            name: gogs
          spec:
            tags:
            - annotations:
                description: The Gogs git server docker image
                tags: gogs,go,golang
              from:
                kind: DockerImage
                name: "openshiftdemos/gogs:{{ gogs_version }}"
              name: "{{ gogs_version }}"
    - name: Create {{ namespace }} PVC for gogs
      k8s: 
        api_key: "{{ _auth_result.k8s_auth.api_key }}"
        api_version: v1
        state: "{{ todo_state }}"
        namespace: "{{ namespace }}"
        definition:
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: gogs
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 2Gi 
    - name: Create Gogs DeploymentConfig
      k8s:
        api_key: "{{ _auth_result.k8s_auth.api_key }}"
        api_version: v1
        state: "{{ todo_state }}"
        namespace: "{{ namespace }}"
        definition: "{{ lookup('template', 'gogs-dc.yml') }}"
    - name: Create PostgreSQL Service 
      k8s:
        api_key: "{{ _auth_result.k8s_auth.api_key }}"
        api_version: v1
        state: "{{ todo_state }}"
        namespace: "{{ namespace }}"
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            labels:
              app: postgresql-gogs
            name: postgresql-gogs
          spec:
            ports:
            - name: postgresql
              port: 5432
              protocol: TCP
              targetPort: 5432
            selector:
              app: postgresql-gogs
            sessionAffinity: None
            type: ClusterIP
    - name: Create {{ namespace }} PVC for postgresql-gogs
      k8s: 
        api_key: "{{ _auth_result.k8s_auth.api_key }}"
        api_version: v1
        state: "{{ todo_state }}"
        namespace: "{{ namespace }}"
        definition:
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: postgresql-gogs
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 2Gi 
    - name: Create PostgreSQL DeploymentConfig
      k8s:
        api_key: "{{ _auth_result.k8s_auth.api_key }}"
        api_version: v1
        state: "{{ todo_state }}"
        namespace: "{{ namespace }}"
        definition: "{{ lookup('template', 'postgresql-dc.yml') }}"
    - name: Deploy install gogs pod
      k8s:
        api_key: "{{ _auth_result.k8s_auth.api_key }}"
        api_version: v1
        state: "{{ todo_state }}"
        namespace: "{{ namespace }}"
        definition:
          apiVersion: v1
          kind: Pod
          metadata:
            annotations:
              template.alpha.openshift.io/wait-for-ready: "true"
            labels:
              app: gogs
              job: install-gogs
            name: install-gogs
          spec:
            containers:
            - command:
              - /bin/bash
              - /tmp/install/installgogs.sh
              env:
              - name: DEV_PROJECT
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.namespace
              image: docker.io/openshiftdemos/oc
              name: oc
              resources:
                limits:
                  memory: 128Mi
              volumeMounts:
              - mountPath: /tmp/install
                name: gogs-install
            restartPolicy: Never
            volumes:
            - configMap:
                items:
                - key: installgogs.sh
                  path: installgogs.sh
                name: gogs-install
              name: gogs-install
    - name: Create install gogs config map 
      k8s:
        api_key: "{{ _auth_result.k8s_auth.api_key }}"
        api_version: v1
        state: "{{ todo_state }}"
        namespace: "{{ namespace }}"
        definition: "{{ lookup('template', 'install-gogs-cm.yml') }}"
    
    #Verify that deployments are successful
    - name: "Waiting for MongoDB Deployment to complete" 
      k8s_info:
        api_key: "{{ _auth_result.k8s_auth.api_key }}"
        name: "{{ mongodb_application_name }}"
        namespace: "{{ namespace }}"
        kind: DeploymentConfig
      when: todo_state == "present"
      register: _dc_output
      until:
        - _dc_output.resources[0].status is defined
        - _dc_output.resources[0].status.readyReplicas is defined
        - _dc_output.resources[0].status.readyReplicas > 0
      retries: 10
      delay: 20
    - name: "Waiting for PostGreSQL Deployment to complete" 
      k8s_info:
        api_key: "{{ _auth_result.k8s_auth.api_key }}"
        name: postgresql-gogs
        namespace: "{{ namespace }}"
        kind: DeploymentConfig
      when: todo_state == "present"
      register: _dc_output
      until:
        - _dc_output.resources[0].status is defined
        - _dc_output.resources[0].status.readyReplicas is defined
        - _dc_output.resources[0].status.readyReplicas > 0
      retries: 10
      delay: 20
    - name: "Waiting for Gogs Deployment to complete" 
      k8s_info:
        api_key: "{{ _auth_result.k8s_auth.api_key }}"
        name: gogs
        namespace: "{{ namespace }}"
        kind: DeploymentConfig
      when: todo_state == "present"
      register: _dc_output
      until:
        - _dc_output.resources[0].status is defined
        - _dc_output.resources[0].status.readyReplicas is defined
        - _dc_output.resources[0].status.readyReplicas > 0
      retries: 10
      delay: 20
    - name: "Waiting for ToDoApp Deployment to complete" 
      k8s_info:
        api_key: "{{ _auth_result.k8s_auth.api_key }}"
        name: "{{ todo_app_name }}"
        namespace: "{{ namespace }}"
        kind: DeploymentConfig
      when: todo_state == "present"
      register: _dc_output
      until:
        - _dc_output.resources[0].status is defined
        - _dc_output.resources[0].status.readyReplicas is defined
        - _dc_output.resources[0].status.readyReplicas > 0
      retries: 20
      delay: 30
...
