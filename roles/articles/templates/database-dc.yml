---
apiVersion: v1
kind: DeploymentConfig
metadata:
  annotations:
    description: Defines how to deploy the database
  name: "{{ database_service_name }}"
spec:
  replicas: 1
  selector:
    name: "{{ database_service_name }}"
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        name: "{{ database_service_name }}"
      name: "{{ database_service_name }}"
    spec:
      containers:
      - env:
        - name: POSTGRESQL_USER
          valueFrom:
            secretKeyRef:
              key: database-user
              name: "{{ name }}"
        - name: POSTGRESQL_PASSWORD
          valueFrom:
            secretKeyRef:
              key: database-password
              name: "{{ name }}"
        - name: POSTGRESQL_DATABASE
          value: "{{ database_name }}"
        - name: POSTGRESQL_MAX_CONNECTIONS
          value: "{{ postgresql_max_connections }}"
        - name: POSTGRESQL_SHARED_BUFFERS
          value: "{{ postgresql_shared_buffers }}"
        image: ' '
        livenessProbe:
          exec:
            command:
            - /usr/libexec/check-container
            - --live
          initialDelaySeconds: 120
          timeoutSeconds: 10
        name: postgresql
        ports:
        - containerPort: 5432
        readinessProbe:
          exec:
            command:
            - /usr/libexec/check-container
          initialDelaySeconds: 5
          timeoutSeconds: 1
        resources:
          limits:
            memory: "{{ memory_postgresql_limit }}"
        volumeMounts:
        - mountPath: /var/lib/pgsql/data
          name: "{{ database_service_name }}-data"
      volumes:
      - name: "{{ database_service_name }}-data"
        persistentVolumeClaim:
          claimName: "{{ database_service_name }}"
  triggers:
  - imageChangeParams:
      automatic: true
      containerNames:
      - postgresql
      from:
        kind: ImageStreamTag
        name: postgresql:10
        namespace: "{{ baseImages_namespace}}"

    type: ImageChange
  - type: ConfigChange
...
